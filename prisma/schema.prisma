datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Event {
  id        String   @id @default(cuid())
  title     String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  outgoingConnections EventConnection[] @relation("SourceEvent")
  incomingConnections EventConnection[] @relation("TargetEvent")

  @@index([authorId])
  @@index([createdAt])
}

enum ConnectionType {
  FOLLOWS
  CAUSES
  ENABLES
  PREVENTS
  PARALLEL
}

model EventConnection {
  id       String         @id @default(cuid())
  order    Int            @default(1)
  type     ConnectionType @default(FOLLOWS)
  strength Int            @default(1) @db.SmallInt
  notes    String?

  createdAt DateTime @default(now())

  sourceEvent   Event  @relation("SourceEvent", fields: [sourceEventId], references: [id], onDelete: Cascade)
  sourceEventId String

  targetEvent   Event  @relation("TargetEvent", fields: [targetEventId], references: [id], onDelete: Cascade)
  targetEventId String

  @@unique([sourceEventId, targetEventId, type])
  @@index([sourceEventId, order])
  @@index([targetEventId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
